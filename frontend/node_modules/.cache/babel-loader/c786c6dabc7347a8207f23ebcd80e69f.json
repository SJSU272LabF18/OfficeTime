{"ast":null,"code":"import _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable max-statements */\n\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helpers, CommonProps, Line } from \"victory-core\";\n\nvar ErrorBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ErrorBar, _React$Component);\n\n  function ErrorBar() {\n    _classCallCheck(this, ErrorBar);\n\n    return _possibleConstructorReturn(this, (ErrorBar.__proto__ || Object.getPrototypeOf(ErrorBar)).apply(this, arguments));\n  }\n\n  _createClass(ErrorBar, [{\n    key: \"getStyle\",\n    value: function getStyle(props) {\n      var style = props.style,\n          datum = props.datum,\n          active = props.active;\n      return Helpers.evaluateStyle(_assign({\n        stroke: \"black\"\n      }, style), datum, active);\n    }\n  }, {\n    key: \"renderBorder\",\n    value: function renderBorder(props, error, type) {\n      var x = props.x,\n          y = props.y,\n          borderWidth = props.borderWidth,\n          events = props.events,\n          style = props.style,\n          role = props.role,\n          shapeRendering = props.shapeRendering,\n          className = props.className,\n          lineComponent = props.lineComponent,\n          transform = props.transform,\n          id = props.id;\n      var vertical = type === \"right\" || type === \"left\";\n      var borderProps = {\n        role: role,\n        shapeRendering: shapeRendering,\n        className: className,\n        events: events,\n        style: style,\n        transform: transform,\n        key: \"\".concat(id, \"-border-\").concat(type),\n        x1: vertical ? error[type] : x - borderWidth,\n        x2: vertical ? error[type] : x + borderWidth,\n        y1: vertical ? y - borderWidth : error[type],\n        y2: vertical ? y + borderWidth : error[type]\n      };\n      return React.cloneElement(lineComponent, borderProps);\n    }\n  }, {\n    key: \"renderCross\",\n    value: function renderCross(props, error, type) {\n      var x = props.x,\n          y = props.y,\n          events = props.events,\n          style = props.style,\n          role = props.role,\n          shapeRendering = props.shapeRendering,\n          className = props.className,\n          lineComponent = props.lineComponent,\n          transform = props.transform,\n          id = props.id;\n      var vertical = type === \"top\" || type === \"bottom\";\n      var borderProps = {\n        role: role,\n        shapeRendering: shapeRendering,\n        className: className,\n        events: events,\n        style: style,\n        transform: transform,\n        key: \"\".concat(id, \"-cross-\").concat(type),\n        x1: x,\n        x2: vertical ? x : error[type],\n        y1: y,\n        y2: vertical ? error[type] : y\n      };\n      return React.cloneElement(lineComponent, borderProps);\n    }\n  }, {\n    key: \"calculateError\",\n    value: function calculateError(props) {\n      var errorX = props.errorX,\n          errorY = props.errorY,\n          scale = props.scale;\n      var rangeX = scale.x.range();\n      var rangeY = scale.y.range();\n      var positiveErrorX = errorX ? errorX[0] : undefined;\n      var negativeErrorX = errorX ? errorX[1] : undefined;\n      var positiveErrorY = errorY ? errorY[1] : undefined;\n      var negativeErrorY = errorY ? errorY[0] : undefined;\n      return {\n        right: positiveErrorX >= rangeX[1] ? rangeX[1] : positiveErrorX,\n        left: negativeErrorX <= rangeX[0] ? rangeX[0] : negativeErrorX,\n        top: positiveErrorY >= rangeY[0] ? rangeY[0] : positiveErrorY,\n        bottom: negativeErrorY <= rangeY[1] ? rangeY[1] : negativeErrorY\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = _assign({}, this.props, {\n        style: this.getStyle(this.props)\n      });\n\n      var error = this.calculateError(props);\n      var children = [error.right ? this.renderBorder(props, error, \"right\") : null, error.left ? this.renderBorder(props, error, \"left\") : null, error.bottom ? this.renderBorder(props, error, \"bottom\") : null, error.top ? this.renderBorder(props, error, \"top\") : null, error.right ? this.renderCross(props, error, \"right\") : null, error.left ? this.renderCross(props, error, \"left\") : null, error.bottom ? this.renderCross(props, error, \"bottom\") : null, error.top ? this.renderCross(props, error, \"top\") : null].filter(Boolean);\n      return React.cloneElement(props.groupComponent, {}, children);\n    }\n  }]);\n\n  return ErrorBar;\n}(React.Component);\n\nObject.defineProperty(ErrorBar, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: _objectSpread({}, CommonProps.primitiveProps, {\n    borderWidth: PropTypes.number,\n    datum: PropTypes.object,\n    errorX: PropTypes.oneOfType([PropTypes.number, PropTypes.array, PropTypes.bool]),\n    errorY: PropTypes.oneOfType([PropTypes.number, PropTypes.array, PropTypes.bool]),\n    groupComponent: PropTypes.element,\n    lineComponent: PropTypes.element,\n    x: PropTypes.number,\n    y: PropTypes.number\n  })\n});\nObject.defineProperty(ErrorBar, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    groupComponent: React.createElement(\"g\", null),\n    lineComponent: React.createElement(Line, null)\n  }\n});\nexport { ErrorBar as default };","map":null,"metadata":{},"sourceType":"module"}