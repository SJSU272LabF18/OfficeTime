{"ast":null,"code":"import _pick from \"lodash/pick\";\nimport _isFunction from \"lodash/isFunction\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Selection, Helpers, Collection, LineSegment, Scale, Domain, Box } from \"victory-core\";\nimport isEqual from \"react-fast-compare\";\n\nvar getScale = function getScale(props) {\n  var _props$scale = props.scale,\n      scale = _props$scale === void 0 ? {} : _props$scale,\n      _props$dimension = props.dimension,\n      dimension = _props$dimension === void 0 ? \"x\" : _props$dimension;\n\n  if (scale[dimension]) {\n    return scale[dimension];\n  }\n\n  var fallbackScale = Scale.getBaseScale(props, dimension);\n  var range = Helpers.getRange(props, dimension);\n  var domain = Domain.getDomainFromProps(props, dimension) || [0, 1];\n  fallbackScale.range(range).domain(domain);\n  return fallbackScale;\n};\n\nvar toRange = function toRange(props, domain) {\n  var scale = getScale(props);\n  return [scale(Math.min.apply(Math, _toConsumableArray(domain))), scale(Math.max.apply(Math, _toConsumableArray(domain)))];\n};\n\nvar toDomain = function toDomain(props, range) {\n  var scale = getScale(props);\n  return [scale.invert(Math.min.apply(Math, _toConsumableArray(range))), scale.invert(Math.max.apply(Math, _toConsumableArray(range)))];\n};\n\nvar getFullRange = function getFullRange(props) {\n  var scale = getScale(props);\n  return scale.range();\n};\n\nvar getFullDomain = function getFullDomain(props) {\n  var scale = getScale(props);\n  return scale.domain();\n};\n\nvar withinBound = function withinBound(value, bound) {\n  return value >= Math.min.apply(Math, _toConsumableArray(bound)) && value <= Math.max.apply(Math, _toConsumableArray(bound));\n};\n\nvar getActiveHandle = function getActiveHandle(props, position, range) {\n  var width = props.handleWidth / 2;\n  var dimension = props.dimension;\n\n  var getHandle = function getHandle(type) {\n    var base = {\n      min: dimension === \"x\" ? Math.min.apply(Math, _toConsumableArray(range)) : Math.max.apply(Math, _toConsumableArray(range)),\n      max: dimension === \"x\" ? Math.max.apply(Math, _toConsumableArray(range)) : Math.min.apply(Math, _toConsumableArray(range))\n    };\n    return [base[type] - width, base[type] + width];\n  };\n\n  var active = [\"min\", \"max\"].reduce(function (memo, type) {\n    memo[type] = withinBound(position, getHandle(type)) ? type : undefined;\n    return memo;\n  }, {});\n  return active.min && active.max ? \"both\" : active.min || active.max;\n};\n\nvar getMinimumDomain = function getMinimumDomain() {\n  return [0, 1 / Number.MAX_SAFE_INTEGER];\n};\n\nvar panBox = function panBox(props, position) {\n  var brushDomain = props.brushDomain,\n      startPosition = props.startPosition;\n  var range = toRange(props, brushDomain);\n  var fullRange = getFullRange(props);\n  var size = Math.abs(range[1] - range[0]);\n  var globalMin = Math.min.apply(Math, _toConsumableArray(fullRange));\n  var globalMax = Math.max.apply(Math, _toConsumableArray(fullRange));\n  var delta = startPosition ? startPosition - position : 0;\n  var min = Math.min.apply(Math, _toConsumableArray(range)) - delta;\n  var max = Math.max.apply(Math, _toConsumableArray(range)) - delta;\n  var constrainedMin = min > globalMax - size ? globalMax - size : Math.max(min, globalMin);\n  var constrainedMax = max < globalMin + size ? globalMin + size : Math.min(max, globalMax);\n  return [constrainedMin, constrainedMax];\n};\n\nvar fallbackProps = {\n  brushAreaStyle: {\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: function opacity(d, a) {\n      return a ? 0.2 : 0.1;\n    } // eslint-disable-line no-magic-numbers\n\n  },\n  brushStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: function opacity(d, a) {\n      return a ? 0.4 : 0.3;\n    } // eslint-disable-line no-magic-numbers\n\n  },\n  handleStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"none\"\n  }\n};\n\nvar VictoryBrushLine =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VictoryBrushLine, _React$Component);\n\n  function VictoryBrushLine() {\n    _classCallCheck(this, VictoryBrushLine);\n\n    return _possibleConstructorReturn(this, (VictoryBrushLine.__proto__ || Object.getPrototypeOf(VictoryBrushLine)).apply(this, arguments));\n  }\n\n  _createClass(VictoryBrushLine, [{\n    key: \"getRectDimensions\",\n    value: function getRectDimensions(props, brushWidth, domain) {\n      var dimension = props.dimension,\n          brushDomain = props.brushDomain;\n      domain = domain || brushDomain || getFullDomain(props);\n      var range = toRange(props, domain);\n      var coordinates = dimension === \"x\" ? {\n        y1: props.y1,\n        y2: props.y2,\n        x1: Math.min.apply(Math, _toConsumableArray(range)),\n        x2: Math.max.apply(Math, _toConsumableArray(range))\n      } : {\n        x1: props.x1,\n        x2: props.x2,\n        y1: Math.min.apply(Math, _toConsumableArray(range)),\n        y2: Math.max.apply(Math, _toConsumableArray(range))\n      };\n      var x1 = coordinates.x1,\n          x2 = coordinates.x2,\n          y1 = coordinates.y1,\n          y2 = coordinates.y2;\n      var offset = {\n        x: dimension === \"x\" ? 0 : brushWidth / 2,\n        y: dimension === \"y\" ? 0 : brushWidth / 2\n      };\n      var x = Math.min(x1, x2) - offset.x;\n      var y = Math.min(y1, y2) - offset.y;\n      var width = Math.max(x1, x2) + offset.x - x;\n      var height = Math.max(y1, y2) + offset.y - y;\n      return {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      };\n    }\n  }, {\n    key: \"getHandleDimensions\",\n    value: function getHandleDimensions(props) {\n      var dimension = props.dimension,\n          handleWidth = props.handleWidth,\n          x1 = props.x1,\n          x2 = props.x2,\n          y1 = props.y1,\n          y2 = props.y2,\n          brushDomain = props.brushDomain;\n      var brushWidth = props.brushWidth || props.width;\n      var domain = brushDomain || getFullDomain(props);\n      var range = toRange(props, domain);\n      var defaultX = Math.min(x1, x2) - brushWidth / 2;\n      var defaultY = Math.min(y1, y2) - brushWidth / 2;\n      var x = {\n        min: dimension === \"x\" ? Math.min.apply(Math, _toConsumableArray(range)) - handleWidth / 2 : defaultX,\n        max: dimension === \"x\" ? Math.max.apply(Math, _toConsumableArray(range)) - handleWidth / 2 : defaultX\n      };\n      var y = {\n        min: dimension === \"y\" ? Math.max.apply(Math, _toConsumableArray(range)) - handleWidth / 2 : defaultY,\n        max: dimension === \"y\" ? Math.min.apply(Math, _toConsumableArray(range)) - handleWidth / 2 : defaultY\n      };\n      var width = dimension === \"x\" ? handleWidth : brushWidth;\n      var height = dimension === \"x\" ? brushWidth : handleWidth;\n      return {\n        min: {\n          x: x.min,\n          y: y.min,\n          width: width,\n          height: height\n        },\n        max: {\n          x: x.max,\n          y: y.max,\n          width: width,\n          height: height\n        }\n      };\n    }\n  }, {\n    key: \"getCursor\",\n    value: function getCursor(props) {\n      var dimension = props.dimension,\n          _props$activeBrushes = props.activeBrushes,\n          activeBrushes = _props$activeBrushes === void 0 ? {} : _props$activeBrushes;\n\n      if (activeBrushes.minHandle || activeBrushes.maxHandle) {\n        return dimension === \"x\" ? \"ew-resize\" : \"ns-resize\";\n      } else if (activeBrushes.brush) {\n        return \"move\";\n      }\n\n      return \"crosshair\";\n    }\n  }, {\n    key: \"renderHandles\",\n    value: function renderHandles(props) {\n      var handleComponent = props.handleComponent,\n          handleStyle = props.handleStyle,\n          id = props.id,\n          brushDomain = props.brushDomain,\n          _props$datum = props.datum,\n          datum = _props$datum === void 0 ? {} : _props$datum,\n          _props$activeBrushes2 = props.activeBrushes,\n          activeBrushes = _props$activeBrushes2 === void 0 ? {} : _props$activeBrushes2;\n\n      if (!brushDomain) {\n        return null;\n      }\n\n      var handleDimensions = this.getHandleDimensions(props);\n\n      var style = _assign({}, fallbackProps.handleStyle, handleStyle);\n\n      var minDatum = _assign({\n        handleValue: Collection.getMinValue(brushDomain)\n      }, datum);\n\n      var maxDatum = _assign({\n        handleValue: Collection.getMaxValue(brushDomain)\n      }, datum);\n\n      var minHandleProps = _assign({\n        key: \"\".concat(id, \"-min\"),\n        style: Helpers.evaluateStyle(style, minDatum, activeBrushes.minHandle)\n      }, handleDimensions.min);\n\n      var maxHandleProps = _assign({\n        key: \"\".concat(id, \"-max\"),\n        style: Helpers.evaluateStyle(style, maxDatum, activeBrushes.maxHandle)\n      }, handleDimensions.max);\n\n      return [React.cloneElement(handleComponent, minHandleProps), React.cloneElement(handleComponent, maxHandleProps)];\n    }\n  }, {\n    key: \"renderBrush\",\n    value: function renderBrush(props) {\n      var brushComponent = props.brushComponent,\n          brushStyle = props.brushStyle,\n          _props$activeBrushes3 = props.activeBrushes,\n          activeBrushes = _props$activeBrushes3 === void 0 ? {} : _props$activeBrushes3,\n          _props$datum2 = props.datum,\n          datum = _props$datum2 === void 0 ? {} : _props$datum2,\n          brushDomain = props.brushDomain;\n\n      if (!brushDomain) {\n        return null;\n      }\n\n      var brushWidth = props.brushWidth || props.width;\n      var rectDimensions = this.getRectDimensions(props, brushWidth);\n\n      var baseStyle = _assign({}, fallbackProps.brushStyle, brushStyle);\n\n      var style = Helpers.evaluateStyle(baseStyle, datum, activeBrushes.brush);\n\n      var brushProps = _assign({\n        style: style\n      }, rectDimensions);\n\n      return React.cloneElement(brushComponent, brushProps);\n    }\n  }, {\n    key: \"renderBrushArea\",\n    value: function renderBrushArea(props) {\n      var brushAreaComponent = props.brushAreaComponent,\n          brushAreaStyle = props.brushAreaStyle,\n          _props$activeBrushes4 = props.activeBrushes,\n          activeBrushes = _props$activeBrushes4 === void 0 ? {} : _props$activeBrushes4,\n          _props$datum3 = props.datum,\n          datum = _props$datum3 === void 0 ? {} : _props$datum3;\n      var brushAreaWidth = props.brushAreaWidth || props.width;\n      var cursor = this.getCursor(props);\n      var rectDimensions = this.getRectDimensions(props, brushAreaWidth, getFullDomain(props));\n\n      var baseStyle = _assign({\n        cursor: cursor\n      }, fallbackProps.brushAreaStyle, brushAreaStyle);\n\n      var style = Helpers.evaluateStyle(baseStyle, datum, activeBrushes.brushArea);\n\n      var brushAreaProps = _assign({\n        style: style\n      }, rectDimensions);\n\n      return React.cloneElement(brushAreaComponent, brushAreaProps);\n    }\n  }, {\n    key: \"renderLine\",\n    value: function renderLine(props) {\n      var filteredProps = _pick(props, [\"x1\", \"x2\", \"y1\", \"y2\", \"datum\", \"scale\", \"active\", \"style\"]);\n\n      return React.cloneElement(props.lineComponent, filteredProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"g\", this.props.events, this.renderLine(this.props), this.renderBrushArea(this.props), this.renderBrush(this.props), this.renderHandles(this.props));\n    }\n  }]);\n\n  return VictoryBrushLine;\n}(React.Component);\n\nObject.defineProperty(VictoryBrushLine, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    allowDrag: PropTypes.bool,\n    allowDraw: PropTypes.bool,\n    allowResize: PropTypes.bool,\n    brushAreaComponent: PropTypes.element,\n    brushAreaStyle: PropTypes.object,\n    brushAreaWidth: PropTypes.number,\n    brushComponent: PropTypes.element,\n    brushDimension: PropTypes.oneOf([\"x\", \"y\"]),\n    brushDomain: PropTypes.array,\n    brushStyle: PropTypes.object,\n    brushWidth: PropTypes.number,\n    className: PropTypes.string,\n    dimension: PropTypes.oneOf([\"x\", \"y\"]),\n    disable: PropTypes.bool,\n    events: PropTypes.object,\n    groupComponent: PropTypes.element,\n    handleComponent: PropTypes.element,\n    handleStyle: PropTypes.object,\n    handleWidth: PropTypes.number,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    lineComponent: PropTypes.element,\n    name: PropTypes.string,\n    onBrushDomainChange: PropTypes.func,\n    scale: PropTypes.object,\n    style: PropTypes.object,\n    type: PropTypes.string,\n    width: PropTypes.number\n  }\n});\nObject.defineProperty(VictoryBrushLine, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    allowDrag: true,\n    allowDraw: true,\n    allowResize: true,\n    brushAreaComponent: React.createElement(Box, null),\n    brushComponent: React.createElement(Box, null),\n    groupComponent: React.createElement(\"g\", null),\n    handleComponent: React.createElement(Box, null),\n    handleWidth: 10,\n    lineComponent: React.createElement(LineSegment, null),\n    width: 10\n  }\n});\nObject.defineProperty(VictoryBrushLine, \"defaultEvents\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: function value(props) {\n    return props.disable ? undefined : [{\n      target: props.type,\n      eventHandlers: {\n        onMouseEnter: function onMouseEnter(evt, targetProps) {\n          evt.preventDefault();\n          var dimension = targetProps.dimension,\n              allowResize = targetProps.allowResize,\n              brushDomain = targetProps.brushDomain;\n          var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          var position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          var fullDomain = getFullDomain(targetProps);\n          var currentDomain = brushDomain || fullDomain;\n          var range = toRange(targetProps, currentDomain);\n          var activeHandle = allowResize && getActiveHandle(targetProps, position, range);\n          var activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, range) && !isEqual(fullDomain, currentDomain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"min\" || activeHandle === \"both\"\n          };\n          return [{\n            mutation: function mutation() {\n              return {\n                activeBrushes: activeBrushes,\n                brushDomain: targetProps.brushDomain,\n                parentSVG: parentSVG\n              };\n            }\n          }];\n        },\n        onMouseDown: function onMouseDown(evt, targetProps) {\n          evt.preventDefault();\n          var allowResize = targetProps.allowResize,\n              allowDrag = targetProps.allowDrag,\n              allowDraw = targetProps.allowDraw,\n              dimension = targetProps.dimension,\n              activeBrushes = targetProps.activeBrushes,\n              brushDomain = targetProps.brushDomain; // Don't trigger events for static brushes\n\n          if (!allowResize && !allowDrag) {\n            return [];\n          }\n\n          var fullDomain = getFullDomain(targetProps);\n          var currentDomain = brushDomain || fullDomain;\n          var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          var position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          var range = toRange(targetProps, currentDomain);\n          var activeHandle = allowResize && getActiveHandle(targetProps, position, range); // If the event occurs in any of the handle regions, start a resize\n\n          if (activeHandle) {\n            return [{\n              mutation: function mutation() {\n                return {\n                  parentSVG: parentSVG,\n                  isSelecting: true,\n                  activeHandle: activeHandle,\n                  brushDomain: currentDomain,\n                  startPosition: position,\n                  activeBrushes: activeBrushes\n                };\n              }\n            }];\n          } else if (withinBound(position, range) && !isEqual(fullDomain, currentDomain)) {\n            // if the event occurs within a selected region start a panning event, unless the whole\n            // domain is selected\n            return [{\n              mutation: function mutation() {\n                return {\n                  isPanning: allowDrag,\n                  startPosition: position,\n                  brushDomain: currentDomain,\n                  activeBrushes: activeBrushes,\n                  parentSVG: parentSVG\n                };\n              }\n            }];\n          } else {\n            // if the event occurs outside the region, or if the whole domain is selected,\n            // start a new selection\n            return allowDraw ? [{\n              mutation: function mutation() {\n                return {\n                  isSelecting: allowResize,\n                  brushDomain: null,\n                  startPosition: position,\n                  activeBrushes: activeBrushes,\n                  parentSVG: parentSVG\n                };\n              }\n            }] : [];\n          }\n        },\n        onMouseMove: function onMouseMove(evt, targetProps) {\n          // eslint-disable-line max-statements, complexity\n          var isPanning = targetProps.isPanning,\n              isSelecting = targetProps.isSelecting,\n              allowResize = targetProps.allowResize,\n              allowDrag = targetProps.allowDrag,\n              dimension = targetProps.dimension,\n              onBrushDomainChange = targetProps.onBrushDomainChange,\n              brushDomain = targetProps.brushDomain;\n\n          if (isPanning || isSelecting) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          var position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          var fullDomain = getFullDomain(targetProps);\n          var domain = brushDomain || fullDomain;\n          var initialRange = toRange(targetProps, domain);\n          var activeHandle = getActiveHandle(targetProps, position, initialRange);\n          var activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, initialRange) && !isEqual(fullDomain, domain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"max\" || activeHandle === \"both\"\n          };\n\n          if (!targetProps.isPanning && !targetProps.isSelecting) {\n            return [{\n              mutation: function mutation() {\n                return {\n                  activeBrushes: activeBrushes,\n                  brushDomain: targetProps.brushDomain,\n                  parentSVG: parentSVG\n                };\n              }\n            }];\n          }\n\n          if (allowDrag && isPanning) {\n            var fullRange = getFullRange(targetProps);\n            var range = panBox(targetProps, position);\n            var currentDomain = toDomain(targetProps, range);\n            var startPosition = Math.max.apply(Math, _toConsumableArray(range)) >= Math.max.apply(Math, _toConsumableArray(fullRange)) || Math.min.apply(Math, _toConsumableArray(range)) <= Math.min.apply(Math, _toConsumableArray(fullRange)) ? targetProps.startPosition : position;\n            var mutatedProps = {\n              startPosition: startPosition,\n              isPanning: true,\n              brushDomain: currentDomain,\n              activeBrushes: {\n                brush: true\n              },\n              parentSVG: parentSVG\n            };\n\n            if (_isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(currentDomain, _defaults({}, mutatedProps, targetProps));\n            }\n\n            return [{\n              mutation: function mutation() {\n                return mutatedProps;\n              }\n            }];\n          } else if (allowResize && isSelecting) {\n            var _currentDomain = brushDomain || getMinimumDomain();\n\n            var _range = toRange(targetProps, _currentDomain);\n\n            var oppositeHandle = targetProps.activeHandle === \"min\" ? \"max\" : \"min\";\n            var handle = targetProps.activeHandle && getActiveHandle(targetProps, position, _range) === \"both\" ? oppositeHandle : targetProps.activeHandle;\n\n            if (!handle) {\n              _currentDomain = toDomain(targetProps, [targetProps.startPosition, position]);\n            } else {\n              var rangeMax = dimension === \"x\" ? Math.max.apply(Math, _toConsumableArray(_range)) : Math.min.apply(Math, _toConsumableArray(_range));\n              var rangeMin = dimension === \"x\" ? Math.min.apply(Math, _toConsumableArray(_range)) : Math.max.apply(Math, _toConsumableArray(_range));\n              var min = handle === \"max\" ? rangeMin : position;\n              var max = handle === \"min\" ? rangeMax : position;\n              _currentDomain = toDomain(targetProps, [min, max]);\n            }\n\n            var _mutatedProps = {\n              brushDomain: _currentDomain,\n              startPosition: targetProps.startPosition,\n              isSelecting: isSelecting,\n              activeHandle: handle,\n              parentSVG: parentSVG,\n              activeBrushes: {\n                brush: true,\n                minHandle: activeHandle === \"min\",\n                maxHandle: activeHandle === \"max\"\n              }\n            };\n\n            if (_isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(_currentDomain, _defaults({}, _mutatedProps, targetProps));\n            }\n\n            return [{\n              mutation: function mutation() {\n                return _mutatedProps;\n              }\n            }];\n          }\n\n          return [];\n        },\n        onMouseUp: function onMouseUp(evt, targetProps) {\n          var onBrushDomainChange = targetProps.onBrushDomainChange,\n              brushDomain = targetProps.brushDomain,\n              allowResize = targetProps.allowResize,\n              activeBrushes = targetProps.activeBrushes; // if the mouse hasn't moved since a mouseDown event, select the whole domain region\n\n          var mutatedProps = {\n            isPanning: false,\n            isSelecting: false,\n            activeHandle: null,\n            startPosition: null,\n            brushDomain: brushDomain,\n            activeBrushes: activeBrushes\n          };\n\n          if (allowResize && _isFunction(onBrushDomainChange)) {\n            onBrushDomainChange(brushDomain, _defaults({}, mutatedProps, targetProps));\n          }\n\n          return [{\n            mutation: function mutation() {\n              return mutatedProps;\n            }\n          }];\n        },\n        onMouseLeave: function onMouseLeave(evt, targetProps) {\n          var brushDomain = targetProps.brushDomain;\n          return [{\n            mutation: function mutation() {\n              return {\n                isPanning: false,\n                isSelecting: false,\n                activeHandle: null,\n                startPosition: null,\n                brushDomain: brushDomain,\n                activeBrushes: {}\n              };\n            }\n          }];\n        }\n      }\n    }];\n  }\n});\nexport { VictoryBrushLine as default };","map":null,"metadata":{},"sourceType":"module"}