{"ast":null,"code":"import _isFunction from \"lodash/isFunction\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _flow from \"lodash/flow\";\nimport _includes from \"lodash/includes\";\nimport _forOwn from \"lodash/forOwn\";\nimport _groupBy from \"lodash/groupBy\";\nimport _toPairs from \"lodash/toPairs\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { VictoryContainer, Log } from \"victory-core\";\nimport { voronoiContainerMixin } from \"victory-voronoi-container\";\nimport { zoomContainerMixin } from \"victory-zoom-container\";\nimport { selectionContainerMixin } from \"victory-selection-container\";\nimport { brushContainerMixin } from \"victory-brush-container\";\nimport { cursorContainerMixin } from \"victory-cursor-container\";\n\nvar ensureArray = function ensureArray(thing) {\n  if (!thing) {\n    return [];\n  } else if (!Array.isArray(thing)) {\n    return [thing];\n  } else {\n    return thing;\n  }\n};\n\nvar combineEventHandlers = function combineEventHandlers(eventHandlersArray) {\n  // takes an array of event handler objects and produces one eventHandlers object\n  // creates a custom combinedHandler() for events with multiple conflicting handlers\n  return eventHandlersArray.reduce(function (localHandlers, finalHandlers) {\n    _forOwn(localHandlers, function (localHandler, eventName) {\n      var existingHandler = finalHandlers[eventName];\n\n      if (existingHandler) {\n        // create new handler for event that concats the existing handler's mutations with new ones\n        finalHandlers[eventName] = function combinedHandler() {\n          // named for debug clarity\n          // sometimes handlers return undefined; use empty array instead, for concat()\n          var existingMutations = ensureArray(existingHandler.apply(void 0, arguments));\n          var localMutations = ensureArray(localHandler.apply(void 0, arguments));\n          return existingMutations.concat(localMutations);\n        };\n      } else {\n        finalHandlers[eventName] = localHandler;\n      }\n    });\n\n    return finalHandlers;\n  });\n};\n\nvar combineDefaultEvents = function combineDefaultEvents(defaultEvents) {\n  // takes a defaultEvents array and returns one equal or lesser length,\n  // by combining any events that have the same target\n  var eventsByTarget = _groupBy(defaultEvents, \"target\");\n\n  var events = _toPairs(eventsByTarget).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        target = _ref2[0],\n        eventsArray = _ref2[1];\n\n    eventsArray = eventsArray.filter(Boolean);\n    return _isEmpty(eventsArray) ? null : {\n      target: target,\n      eventHandlers: combineEventHandlers(eventsArray.map(function (event) {\n        return event.eventHandlers;\n      })) // note: does not currently handle eventKey or childName\n\n    };\n  });\n\n  return events.filter(Boolean);\n};\n\nvar combineContainerMixins = function combineContainerMixins(mixins, Container) {\n  var _class, _temp; // similar to Object.assign(A, B), this function will decide conflicts in favor mixinB.\n  // this applies to propTypes and defaultProps.\n  // getChildren will call A's getChildren() and pass the resulting children to B's.\n  // defaultEvents attempts to resolve any conflicts between A and B's defaultEvents.\n\n\n  var Classes = mixins.map(function (mixin) {\n    return mixin(Container);\n  });\n  var instances = Classes.map(function (Class) {\n    return new Class();\n  });\n\n  var NaiveCombinedContainer = _flow(mixins)(Container);\n\n  var displayType = Classes.map(function (Class) {\n    var match = Class.displayName.match(/Victory(.*)Container/);\n    return match[1] || \"\";\n  }).join(\"\");\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_NaiveCombinedContain) {\n    _inherits(VictoryCombinedContainer, _NaiveCombinedContain);\n\n    function VictoryCombinedContainer() {\n      _classCallCheck(this, VictoryCombinedContainer);\n\n      return _possibleConstructorReturn(this, (VictoryCombinedContainer.__proto__ || Object.getPrototypeOf(VictoryCombinedContainer)).apply(this, arguments));\n    }\n\n    _createClass(VictoryCombinedContainer, [{\n      key: \"getChildren\",\n      value: function getChildren(props) {\n        return instances.reduce(function (children, instance) {\n          return instance.getChildren(_objectSpread({}, props, {\n            children: children\n          }));\n        }, props.children);\n      }\n    }]);\n\n    return VictoryCombinedContainer;\n  }(NaiveCombinedContainer), Object.defineProperty(_class, \"displayName\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: \"Victory\".concat(displayType, \"Container\")\n  }), Object.defineProperty(_class, \"propTypes\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: Classes.reduce(function (propTypes, Class) {\n      return _objectSpread({}, propTypes, Class.propTypes);\n    }, {})\n  }), Object.defineProperty(_class, \"defaultProps\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: Classes.reduce(function (defaultProps, Class) {\n      return _objectSpread({}, defaultProps, Class.defaultProps);\n    }, {})\n  }), Object.defineProperty(_class, \"defaultEvents\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: function value(props) {\n      return combineDefaultEvents(Classes.reduce(function (defaultEvents, Class) {\n        var events = _isFunction(Class.defaultEvents) ? Class.defaultEvents(props) : Class.defaultEvents;\n        return _toConsumableArray(defaultEvents).concat(_toConsumableArray(events));\n      }, []));\n    }\n  }), _temp;\n};\n\nvar checkBehaviorName = function checkBehaviorName(behavior, behaviors) {\n  if (behavior && !_includes(behaviors, behavior)) {\n    Log.warn(\"\\\"\".concat(behavior, \"\\\" is not a valid behavior. Choose from [\").concat(behaviors.join(\", \"), \"].\"));\n  }\n};\n\nvar makeCreateContainerFunction = function makeCreateContainerFunction(mixinMap, Container) {\n  return function (behaviorA, behaviorB) {\n    // eslint-disable-line\n    var behaviors = Object.keys(mixinMap);\n    checkBehaviorName(behaviorA, behaviors);\n    checkBehaviorName(behaviorB, behaviors);\n\n    if (arguments.length <= 2 ? 0 : arguments.length - 2) {\n      Log.warn(\"too many arguments given to createContainer (maximum accepted: 2).\");\n    }\n\n    var firstMixins = mixinMap[behaviorA];\n    var secondMixins = mixinMap[behaviorB] || [];\n\n    if (!firstMixins) {\n      return Container;\n    }\n\n    return combineContainerMixins(_toConsumableArray(firstMixins).concat(_toConsumableArray(secondMixins)), Container);\n  };\n};\n\nvar createContainer = makeCreateContainerFunction({\n  zoom: [zoomContainerMixin],\n  voronoi: [voronoiContainerMixin],\n  selection: [selectionContainerMixin],\n  cursor: [cursorContainerMixin],\n  brush: [brushContainerMixin]\n}, VictoryContainer);\nexport { createContainer, makeCreateContainerFunction, combineContainerMixins };","map":null,"metadata":{},"sourceType":"module"}