{"ast":null,"code":"import { Helpers, LabelHelpers, Scale, Domain, Data, Collection } from \"victory-core\";\n\nvar getErrors = function getErrors(datum, scale, axis) {\n  /**\n   * check if it is asymmetric error or symmetric error, asymmetric error should be an array\n   * and the first value is the positive error, the second is the negative error\n   * @param  {Boolean} isArray(errorX)\n   * @return {String or Array}\n   */\n  var errorNames = {\n    x: \"_errorX\",\n    y: \"_errorY\"\n  };\n  var errors = datum[errorNames[axis]];\n\n  if (errors === 0) {\n    return false;\n  }\n\n  return Array.isArray(errors) ? [errors[0] === 0 ? false : scale[axis](errors[0] + datum[\"_\".concat(axis)]), errors[1] === 0 ? false : scale[axis](datum[\"_\".concat(axis)] - errors[1])] : [scale[axis](errors + datum[\"_\".concat(axis)]), scale[axis](datum[\"_\".concat(axis)] - errors)];\n};\n\nvar getData = function getData(props) {\n  var accessorTypes = [\"x\", \"y\", \"errorX\", \"errorY\"];\n\n  if (props.data) {\n    return Data.formatData(props.data, props, accessorTypes);\n  } else {\n    var generatedData = props.errorX || props.errorY ? Data.generateData(props) : [];\n    return Data.formatData(generatedData, props, accessorTypes);\n  }\n};\n\nvar getDomainFromData = function getDomainFromData(props, axis) {\n  var minDomain = Domain.getMinFromProps(props, axis);\n  var maxDomain = Domain.getMaxFromProps(props, axis);\n  var dataset = getData(props);\n\n  if (dataset.length < 1) {\n    var scaleDomain = Scale.getBaseScale(props, axis).domain();\n\n    var _min = minDomain !== undefined ? minDomain : Collection.getMinValue(scaleDomain);\n\n    var _max = maxDomain !== undefined ? maxDomain : Collection.getMaxValue(scaleDomain);\n\n    return Domain.getDomainFromMinMax(_min, _max);\n  }\n\n  var currentAxis = Helpers.getCurrentAxis(axis, props.horizontal);\n  var error = currentAxis === \"x\" ? \"_errorX\" : \"_errorY\";\n\n  var reduceErrorData = function reduceErrorData(type) {\n    var baseCondition = type === \"min\" ? Infinity : -Infinity;\n    var errorIndex = type === \"min\" ? 1 : 0;\n    var sign = type === \"min\" ? -1 : 1;\n    return dataset.reduce(function (memo, datum) {\n      var currentError = Array.isArray(datum[error]) ? datum[error][errorIndex] : datum[error];\n      var current = datum[\"_\".concat(currentAxis)] + sign * (currentError || 0);\n      return memo < current && type === \"min\" || memo > current && type === \"max\" ? memo : current;\n    }, baseCondition);\n  };\n\n  var min = minDomain !== undefined ? minDomain : reduceErrorData(\"min\");\n  var max = maxDomain !== undefined ? maxDomain : reduceErrorData(\"max\");\n  return Domain.getDomainFromMinMax(min, max);\n};\n\nvar getDomain = function getDomain(props, axis) {\n  return Domain.createDomainFunction(getDomainFromData)(props, axis);\n};\n\nvar getCalculatedValues = function getCalculatedValues(props) {\n  var defaultStyles = props.theme && props.theme.errorbar && props.theme.errorbar.style ? props.theme.errorbar.style : {};\n  var style = Helpers.getStyles(props.style, defaultStyles) || {};\n  var data = getData(props);\n  var range = {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var domain = {\n    x: getDomain(props, \"x\"),\n    y: getDomain(props, \"y\")\n  };\n  var scale = {\n    x: Scale.getBaseScale(props, \"x\").domain(domain.x).range(range.x),\n    y: Scale.getBaseScale(props, \"y\").domain(domain.y).range(range.y)\n  };\n  var origin = props.polar ? props.origin || Helpers.getPolarOrigin(props) : undefined;\n  return {\n    domain: domain,\n    data: data,\n    scale: scale,\n    style: style,\n    origin: origin\n  };\n};\n\nvar getLabelProps = function getLabelProps(dataProps, text, style) {\n  var x = dataProps.x,\n      index = dataProps.index,\n      scale = dataProps.scale,\n      errorY = dataProps.errorY;\n  var error = errorY && Array.isArray(errorY) ? errorY[0] : errorY;\n  var y = error || dataProps.y;\n  var labelStyle = style.labels || {};\n  return {\n    style: labelStyle,\n    y: y - (labelStyle.padding || 0),\n    x: x,\n    text: text,\n    index: index,\n    scale: scale,\n    datum: dataProps.datum,\n    data: dataProps.data,\n    textAnchor: labelStyle.textAnchor,\n    verticalAnchor: labelStyle.verticalAnchor || \"end\",\n    angle: labelStyle.angle\n  };\n};\n\nvar getBaseProps = function getBaseProps(props, fallbackProps) {\n  props = Helpers.modifyProps(props, fallbackProps, \"errorbar\");\n\n  var _getCalculatedValues = getCalculatedValues(props, fallbackProps),\n      data = _getCalculatedValues.data,\n      style = _getCalculatedValues.style,\n      scale = _getCalculatedValues.scale,\n      domain = _getCalculatedValues.domain,\n      origin = _getCalculatedValues.origin;\n\n  var _props = props,\n      groupComponent = _props.groupComponent,\n      height = _props.height,\n      width = _props.width,\n      borderWidth = _props.borderWidth,\n      standalone = _props.standalone,\n      theme = _props.theme,\n      polar = _props.polar,\n      padding = _props.padding,\n      labels = _props.labels,\n      events = _props.events,\n      sharedEvents = _props.sharedEvents,\n      name = _props.name;\n  var initialChildProps = {\n    parent: {\n      domain: domain,\n      scale: scale,\n      data: data,\n      height: height,\n      width: width,\n      standalone: standalone,\n      theme: theme,\n      polar: polar,\n      origin: origin,\n      name: name,\n      padding: padding,\n      style: style.parent\n    }\n  };\n  return data.reduce(function (childProps, datum, index) {\n    var eventKey = datum.eventKey || index;\n    var x = scale.x(datum._x1 !== undefined ? datum._x1 : datum._x);\n    var y = scale.y(datum._y1 !== undefined ? datum._y1 : datum._y);\n    var dataProps = {\n      x: x,\n      y: y,\n      scale: scale,\n      datum: datum,\n      data: data,\n      index: index,\n      groupComponent: groupComponent,\n      borderWidth: borderWidth,\n      style: style.data,\n      errorX: getErrors(datum, scale, \"x\"),\n      errorY: getErrors(datum, scale, \"y\")\n    };\n    childProps[eventKey] = {\n      data: dataProps\n    };\n    var text = LabelHelpers.getText(props, datum, index);\n\n    if (text !== undefined && text !== null || labels && (events || sharedEvents)) {\n      childProps[eventKey].labels = getLabelProps(dataProps, text, style);\n    }\n\n    return childProps;\n  }, initialChildProps);\n};\n\nexport { getBaseProps, getDomain, getData };","map":null,"metadata":{},"sourceType":"module"}