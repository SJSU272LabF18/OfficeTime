{"ast":null,"code":"import _isFunction from \"lodash/isFunction\";\nimport _includes from \"lodash/includes\";\nimport Helpers from \"./helpers\";\nimport Collection from \"./collection\";\nimport * as d3Scale from \"d3-scale\";\nvar supportedScaleStrings = [\"linear\", \"time\", \"log\", \"sqrt\"]; // Private Functions\n\nfunction toNewName(scale) {\n  // d3 scale changed the naming scheme for scale from \"linear\" -> \"scaleLinear\" etc.\n  var capitalize = function capitalize(s) {\n    return s && s[0].toUpperCase() + s.slice(1);\n  };\n\n  return \"scale\".concat(capitalize(scale));\n}\n\nfunction validScale(scale) {\n  if (typeof scale === \"function\") {\n    return _isFunction(scale.copy) && _isFunction(scale.domain) && _isFunction(scale.range);\n  } else if (typeof scale === \"string\") {\n    return _includes(supportedScaleStrings, scale);\n  }\n\n  return false;\n}\n\nfunction isScaleDefined(props, axis) {\n  if (!props.scale) {\n    return false;\n  } else if (props.scale.x || props.scale.y) {\n    return props.scale[axis] ? true : false;\n  }\n\n  return true;\n}\n\nfunction getScaleTypeFromProps(props, axis) {\n  if (!isScaleDefined(props, axis)) {\n    return undefined;\n  }\n\n  var scale = props.scale[axis] || props.scale;\n  return typeof scale === \"string\" ? scale : getType(scale);\n}\n\nfunction getScaleFromDomain(props, axis) {\n  var domain;\n\n  if (props.domain && props.domain[axis]) {\n    domain = props.domain[axis];\n  } else if (props.domain && Array.isArray(props.domain)) {\n    domain = props.domain;\n  }\n\n  if (!domain) {\n    return undefined;\n  }\n\n  return Collection.containsDates(domain) ? \"time\" : \"linear\";\n}\n\nfunction getScaleTypeFromData(props, axis) {\n  if (!props.data) {\n    return \"linear\";\n  }\n\n  var accessor = Helpers.createAccessor(props[axis]);\n  var axisData = props.data.map(accessor);\n  return Collection.containsDates(axisData) ? \"time\" : \"linear\";\n} // Exported Functions\n\n\nfunction getBaseScale(props, axis) {\n  var scale = getScaleFromProps(props, axis);\n\n  if (scale) {\n    return scale;\n  }\n\n  var defaultScale = getScaleFromDomain(props, axis) || getScaleTypeFromData(props, axis);\n  return d3Scale[toNewName(defaultScale)]();\n}\n\nfunction getDefaultScale() {\n  return d3Scale.scaleLinear();\n}\n\nfunction getScaleFromProps(props, axis) {\n  if (!isScaleDefined(props, axis)) {\n    return undefined;\n  }\n\n  var scale = props.scale[axis] || props.scale;\n\n  if (validScale(scale)) {\n    return _isFunction(scale) ? scale : d3Scale[toNewName(scale)]();\n  }\n\n  return undefined;\n}\n\nfunction getScaleType(props, axis) {\n  // if the scale was not given in props, it will be set to linear or time depending on data\n  return getScaleTypeFromProps(props, axis) || getScaleTypeFromData(props, axis);\n}\n\nfunction getType(scale) {\n  var duckTypes = [{\n    name: \"log\",\n    method: \"base\"\n  }, {\n    name: \"ordinal\",\n    method: \"unknown\"\n  }, {\n    name: \"pow-sqrt\",\n    method: \"exponent\"\n  }, {\n    name: \"quantile\",\n    method: \"quantiles\"\n  }, {\n    name: \"quantize-threshold\",\n    method: \"invertExtent\"\n  }];\n  var scaleType = duckTypes.filter(function (type) {\n    return scale[type.method] !== undefined;\n  })[0];\n  return scaleType ? scaleType.name : undefined;\n}\n\nexport default {\n  getBaseScale: getBaseScale,\n  getDefaultScale: getDefaultScale,\n  getScaleFromProps: getScaleFromProps,\n  getScaleType: getScaleType,\n  getType: getType\n};","map":null,"metadata":{},"sourceType":"module"}