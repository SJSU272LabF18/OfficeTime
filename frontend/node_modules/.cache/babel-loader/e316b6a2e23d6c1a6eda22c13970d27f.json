{"ast":null,"code":"import _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { VictoryContainer, Selection } from \"victory-core\";\nimport BrushHelpers from \"./brush-helpers\";\nimport isEqual from \"react-fast-compare\";\nexport var brushContainerMixin = function brushContainerMixin(base) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_base) {\n    _inherits(VictoryBrushContainer, _base);\n\n    function VictoryBrushContainer() {\n      _classCallCheck(this, VictoryBrushContainer);\n\n      return _possibleConstructorReturn(this, (VictoryBrushContainer.__proto__ || Object.getPrototypeOf(VictoryBrushContainer)).apply(this, arguments));\n    }\n\n    _createClass(VictoryBrushContainer, [{\n      key: \"getSelectBox\",\n      value: function getSelectBox(props, coordinates) {\n        var x = coordinates.x,\n            y = coordinates.y;\n        var brushStyle = props.brushStyle,\n            brushComponent = props.brushComponent,\n            name = props.name;\n        var brushComponentStyle = brushComponent.props && brushComponent.props.style;\n        var cursor = !props.allowDrag && !props.allowResize ? \"auto\" : \"move\";\n        return x[0] !== x[1] && y[0] !== y[1] ? React.cloneElement(brushComponent, {\n          key: \"\".concat(name, \"-brush\"),\n          width: Math.abs(x[1] - x[0]) || 1,\n          height: Math.abs(y[1] - y[0]) || 1,\n          x: Math.min(x[0], x[1]),\n          y: Math.min(y[0], y[1]),\n          cursor: cursor,\n          style: _defaults({}, brushComponentStyle, brushStyle)\n        }) : null;\n      }\n    }, {\n      key: \"getCursorPointers\",\n      value: function getCursorPointers(props) {\n        var cursors = {\n          \"yProps\": \"ns-resize\",\n          \"xProps\": \"ew-resize\"\n        };\n\n        if (!props.allowResize && props.allowDrag) {\n          cursors.xProps = \"move\";\n          cursors.yProps = \"move\";\n        } else if (!props.allowResize && !props.allowDrag) {\n          cursors.xProps = \"auto\";\n          cursors.yProps = \"auto\";\n        }\n\n        return cursors;\n      }\n    }, {\n      key: \"getHandles\",\n      value: function getHandles(props, coordinates) {\n        var brushDimension = props.brushDimension,\n            handleWidth = props.handleWidth,\n            handleStyle = props.handleStyle,\n            handleComponent = props.handleComponent,\n            name = props.name;\n        var x = coordinates.x,\n            y = coordinates.y;\n        var width = Math.abs(x[1] - x[0]) || 1;\n        var height = Math.abs(y[1] - y[0]) || 1;\n        var handleComponentStyle = handleComponent.props && handleComponent.props.style || {};\n\n        var style = _defaults({}, handleComponentStyle, handleStyle);\n\n        var cursors = this.getCursorPointers(props);\n        var yProps = {\n          style: style,\n          width: width,\n          height: handleWidth,\n          cursor: cursors.yProps\n        };\n        var xProps = {\n          style: style,\n          width: handleWidth,\n          height: height,\n          cursor: cursors.xProps\n        };\n        var handleProps = {\n          top: brushDimension !== \"x\" && _assign({\n            x: x[0],\n            y: y[1] - handleWidth / 2\n          }, yProps),\n          bottom: brushDimension !== \"x\" && _assign({\n            x: x[0],\n            y: y[0] - handleWidth / 2\n          }, yProps),\n          left: brushDimension !== \"y\" && _assign({\n            y: y[1],\n            x: x[0] - handleWidth / 2\n          }, xProps),\n          right: brushDimension !== \"y\" && _assign({\n            y: y[1],\n            x: x[1] - handleWidth / 2\n          }, xProps)\n        };\n        var handles = [\"top\", \"bottom\", \"left\", \"right\"].reduce(function (memo, curr) {\n          memo = handleProps[curr] ? memo.concat(React.cloneElement(handleComponent, _assign({\n            key: \"\".concat(name, \"-handle-\").concat(curr)\n          }, handleProps[curr]))) : memo;\n          return memo;\n        }, []);\n        return handles.length ? handles : null;\n      }\n    }, {\n      key: \"getRect\",\n      value: function getRect(props) {\n        var currentDomain = props.currentDomain,\n            cachedBrushDomain = props.cachedBrushDomain;\n\n        var brushDomain = _defaults({}, props.brushDomain, props.domain);\n\n        var domain = isEqual(brushDomain, cachedBrushDomain) ? _defaults({}, currentDomain, brushDomain) : brushDomain;\n        var coordinates = Selection.getDomainCoordinates(props, domain);\n        var selectBox = this.getSelectBox(props, coordinates);\n        return selectBox ? [selectBox, this.getHandles(props, coordinates)] : [];\n      } // Overrides method in VictoryContainer\n\n    }, {\n      key: \"getChildren\",\n      value: function getChildren(props) {\n        return _toConsumableArray(React.Children.toArray(props.children)).concat(_toConsumableArray(this.getRect(props)));\n      }\n    }]);\n\n    return VictoryBrushContainer;\n  }(base), Object.defineProperty(_class, \"displayName\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: \"VictoryBrushContainer\"\n  }), Object.defineProperty(_class, \"propTypes\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: _objectSpread({}, VictoryContainer.propTypes, {\n      allowDrag: PropTypes.bool,\n      allowDraw: PropTypes.bool,\n      allowResize: PropTypes.bool,\n      brushComponent: PropTypes.element,\n      brushDimension: PropTypes.oneOf([\"x\", \"y\"]),\n      brushDomain: PropTypes.shape({\n        x: PropTypes.array,\n        y: PropTypes.array\n      }),\n      brushStyle: PropTypes.object,\n      defaultBrushArea: PropTypes.oneOf([\"all\", \"disable\", \"none\"]),\n      disable: PropTypes.bool,\n      handleComponent: PropTypes.element,\n      handleStyle: PropTypes.object,\n      handleWidth: PropTypes.number,\n      onBrushCleared: PropTypes.func,\n      onBrushDomainChange: PropTypes.func,\n      onBrushDomainChangeEnd: PropTypes.func\n    })\n  }), Object.defineProperty(_class, \"defaultProps\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: _objectSpread({}, VictoryContainer.defaultProps, {\n      allowDrag: true,\n      allowDraw: true,\n      allowResize: true,\n      brushComponent: React.createElement(\"rect\", null),\n      brushStyle: {\n        stroke: \"transparent\",\n        fill: \"black\",\n        fillOpacity: 0.1\n      },\n      handleComponent: React.createElement(\"rect\", null),\n      handleStyle: {\n        stroke: \"transparent\",\n        fill: \"transparent\"\n      },\n      handleWidth: 8\n    })\n  }), Object.defineProperty(_class, \"defaultEvents\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: function value(props) {\n      return [{\n        target: \"parent\",\n        eventHandlers: {\n          onMouseDown: function onMouseDown(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseDown(evt, targetProps);\n          },\n          onTouchStart: function onTouchStart(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseDown(evt, targetProps);\n          },\n          onMouseMove: function onMouseMove(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseMove(evt, targetProps);\n          },\n          onTouchMove: function onTouchMove(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseMove(evt, targetProps);\n          },\n          onMouseUp: function onMouseUp(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseUp(evt, targetProps);\n          },\n          onTouchEnd: function onTouchEnd(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseUp(evt, targetProps);\n          },\n          onMouseLeave: function onMouseLeave(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseLeave(evt, targetProps);\n          },\n          onTouchCancel: function onTouchCancel(evt, targetProps) {\n            return props.disable ? {} : BrushHelpers.onMouseLeave(evt, targetProps);\n          }\n        }\n      }];\n    }\n  }), _temp;\n};\nexport default brushContainerMixin(VictoryContainer);","map":null,"metadata":{},"sourceType":"module"}