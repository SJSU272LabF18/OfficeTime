{"ast":null,"code":"import _assign from \"lodash/assign\";\nimport _defaults from \"lodash/defaults\";\n/* eslint-disable func-style */\n\n/* eslint-disable no-use-before-define */\n\nimport React from \"react\";\nimport { Log, Helpers, Scale, Axis, Wrapper } from \"victory-core\";\n\nfunction getAxisProps(child, props, calculatedProps) {\n  var domain = calculatedProps.domain,\n      scale = calculatedProps.scale,\n      originSign = calculatedProps.originSign,\n      stringMap = calculatedProps.stringMap,\n      categories = calculatedProps.categories,\n      horizontal = calculatedProps.horizontal;\n  var childProps = child.props || {};\n  var axis = child.type.getAxis(childProps);\n  var currentAxis = Axis.getCurrentAxis(axis, horizontal);\n  var otherAxis = axis === \"x\" ? \"y\" : \"x\";\n  var axisOffset = getAxisOffset(props, calculatedProps);\n  var offsetY = axis === \"y\" ? undefined : axisOffset.y;\n  var offsetX = axis === \"x\" ? undefined : axisOffset.x;\n  var crossAxis = childProps.crossAxis === false ? false : true;\n  var orientation = Axis.getOrientation(child, axis, originSign[otherAxis]);\n  return {\n    stringMap: stringMap[currentAxis],\n    categories: categories[currentAxis],\n    startAngle: props.startAngle,\n    endAngle: props.endAngle,\n    innerRadius: props.innerRadius,\n    domain: domain,\n    scale: scale,\n    offsetY: childProps.offsetY !== undefined ? childProps.offsetY : offsetY,\n    offsetX: childProps.offsetX !== undefined ? childProps.offsetX : offsetX,\n    crossAxis: crossAxis,\n    orientation: orientation\n  };\n}\n\nfunction getChildProps(child, props, calculatedProps) {\n  var axisChild = Axis.findAxisComponents([child]);\n\n  if (axisChild.length > 0) {\n    return getAxisProps(axisChild[0], props, calculatedProps);\n  }\n\n  var categories = calculatedProps.categories,\n      domain = calculatedProps.domain,\n      range = calculatedProps.range,\n      scale = calculatedProps.scale;\n  return {\n    categories: categories,\n    domain: domain,\n    range: range,\n    scale: scale\n  };\n}\n\nfunction getStyles(props) {\n  var styleProps = props.style && props.style.parent;\n  return {\n    parent: _defaults({}, styleProps, {\n      height: \"100%\",\n      width: \"100%\",\n      userSelect: \"none\"\n    })\n  };\n}\n\nfunction getCalculatedProps(props, childComponents) {\n  var style = getStyles(props);\n  var horizontal = Helpers.isHorizontal(props); // TODO: check\n\n  var categories = {\n    x: Wrapper.getCategories(props, \"x\", childComponents),\n    y: Wrapper.getCategories(props, \"y\", childComponents)\n  };\n  var stringMap = {\n    x: createStringMap(props, \"x\", childComponents),\n    y: createStringMap(props, \"y\", childComponents)\n  };\n  var axisComponents = {\n    x: Axis.getAxisComponent(childComponents, \"x\"),\n    y: Axis.getAxisComponent(childComponents, \"y\")\n  };\n  var domain = {\n    x: getDomain(_assign({}, props, {\n      categories: categories\n    }), \"x\", childComponents),\n    y: getDomain(_assign({}, props, {\n      categories: categories\n    }), \"y\", childComponents)\n  };\n  var range = {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var baseScale = {\n    x: Scale.getScaleFromProps(props, \"x\") || axisComponents.x && axisComponents.x.type.getScale(axisComponents.x.props) || Scale.getDefaultScale(),\n    y: Scale.getScaleFromProps(props, \"y\") || axisComponents.y && axisComponents.y.type.getScale(axisComponents.y.props) || Scale.getDefaultScale()\n  };\n  var scale = {\n    x: baseScale.x.domain(domain.x).range(range.x),\n    y: baseScale.y.domain(domain.y).range(range.y)\n  };\n  var origin = props.polar ? Helpers.getPolarOrigin(props) : Axis.getOrigin(domain);\n  var originSign = {\n    x: Axis.getOriginSign(origin.x, domain.x),\n    y: Axis.getOriginSign(origin.y, domain.y)\n  };\n  var defaultDomainPadding = getDefaultDomainPadding(childComponents, horizontal);\n  var padding = Helpers.getPadding(props);\n  return {\n    axisComponents: axisComponents,\n    categories: categories,\n    domain: domain,\n    range: range,\n    horizontal: horizontal,\n    scale: scale,\n    stringMap: stringMap,\n    style: style,\n    origin: origin,\n    originSign: originSign,\n    defaultDomainPadding: defaultDomainPadding,\n    padding: padding\n  };\n}\n\nfunction getChildren(props, childComponents, calculatedProps) {\n  childComponents = childComponents || getChildComponents(props);\n  calculatedProps = calculatedProps || getCalculatedProps(props, childComponents);\n  var baseStyle = calculatedProps.style.parent;\n  var height = props.height,\n      polar = props.polar,\n      theme = props.theme,\n      width = props.width;\n  var _calculatedProps = calculatedProps,\n      origin = _calculatedProps.origin,\n      horizontal = _calculatedProps.horizontal;\n  var parentName = props.name || \"chart\";\n  return childComponents.map(function (child, index) {\n    var role = child.type && child.type.role;\n    var style = Array.isArray(child.props.style) ? child.props.style : _defaults({}, child.props.style, {\n      parent: baseStyle\n    });\n    var childProps = getChildProps(child, props, calculatedProps);\n    var name = child.props.name || \"\".concat(parentName, \"-\").concat(role, \"-\").concat(index);\n\n    var newProps = _defaults({\n      horizontal: horizontal,\n      height: height,\n      polar: polar,\n      theme: theme,\n      width: width,\n      style: style,\n      name: name,\n      origin: polar ? origin : undefined,\n      padding: calculatedProps.padding,\n      key: \"\".concat(name, \"-key-\").concat(index),\n      standalone: false\n    }, childProps);\n\n    return React.cloneElement(child, newProps);\n  });\n}\n\nvar getChildComponents = function getChildComponents(props, defaultAxes) {\n  var childComponents = React.Children.toArray(props.children);\n\n  if (childComponents.length === 0) {\n    return [defaultAxes.independent, defaultAxes.dependent];\n  }\n\n  var axisComponents = {\n    dependent: Axis.getAxisComponentsWithParent(childComponents, \"dependent\"),\n    independent: Axis.getAxisComponentsWithParent(childComponents, \"independent\")\n  };\n\n  if (axisComponents.dependent.length === 0 && axisComponents.independent.length === 0) {\n    return childComponents.concat([defaultAxes.independent, defaultAxes.dependent]);\n  }\n\n  var axisCount = 0;\n  return childComponents.filter(function (child) {\n    var role = child.type && child.type.role;\n    var childProps = child.props || {};\n\n    if (role !== \"axis\" || childProps.dependentAxis) {\n      return true;\n    } else if (axisCount < 1) {\n      axisCount++;\n      return true;\n    } else {\n      var msg = \"Only one independent VictoryAxis component is allowed when \" + \"using the VictoryChart wrapper. Only the first axis will be used. Please compose \" + \"multi-axis charts manually\";\n      Log.warn(msg);\n      return false;\n    }\n  });\n};\n\nvar getDefaultDomainPadding = function getDefaultDomainPadding(childComponents, horizontal) {\n  var groupComponent = childComponents.filter(function (child) {\n    return child.type && child.type.role && child.type.role === \"group\";\n  });\n\n  if (groupComponent.length < 1) {\n    return undefined;\n  }\n\n  var _groupComponent$0$pro = groupComponent[0].props,\n      offset = _groupComponent$0$pro.offset,\n      children = _groupComponent$0$pro.children;\n  return horizontal ? {\n    y: offset * children.length / 2\n  } : {\n    x: offset * children.length / 2\n  };\n};\n\nvar getDomain = function getDomain(props, axis, childComponents) {\n  childComponents = childComponents || React.Children.toArray(props.children);\n  var domain = Wrapper.getDomain(props, axis, childComponents);\n  var axisComponent = Axis.getAxisComponent(childComponents, axis);\n  var invertDomain = axisComponent && axisComponent.props && axisComponent.props.invertAxis;\n  return invertDomain ? domain.concat().reverse() : domain;\n}; // eslint-disable-next-line complexity\n\n\nvar getAxisOffset = function getAxisOffset(props, calculatedProps) {\n  var axisComponents = calculatedProps.axisComponents,\n      scale = calculatedProps.scale,\n      origin = calculatedProps.origin,\n      domain = calculatedProps.domain,\n      originSign = calculatedProps.originSign,\n      padding = calculatedProps.padding;\n  var top = padding.top,\n      bottom = padding.bottom,\n      left = padding.left,\n      right = padding.right; // make the axes line up, and cross when appropriate\n\n  var axisOrientations = {\n    x: Axis.getOrientation(axisComponents.x, \"x\", originSign.y),\n    y: Axis.getOrientation(axisComponents.y, \"y\", originSign.x)\n  };\n  var orientationOffset = {\n    y: axisOrientations.x === \"bottom\" ? bottom : top,\n    x: axisOrientations.y === \"left\" ? left : right\n  };\n  var originOffset = {\n    x: axisOrientations.y === \"left\" ? 0 : props.width,\n    y: axisOrientations.x === \"bottom\" ? props.height : 0\n  };\n  var originPosition = {\n    x: origin.x === domain.x[0] || origin.x === domain.x[1] ? 0 : scale.x(origin.x),\n    y: origin.y === domain.y[0] || origin.y === domain.y[1] ? 0 : scale.y(origin.y)\n  };\n  var calculatedOffset = {\n    x: originPosition.x ? Math.abs(originOffset.x - originPosition.x) : orientationOffset.x,\n    y: originPosition.y ? Math.abs(originOffset.y - originPosition.y) : orientationOffset.y\n  };\n  return {\n    x: axisComponents.x && axisComponents.x.offsetX !== undefined ? axisComponents.x.offsetX : calculatedOffset.x,\n    y: axisComponents.y && axisComponents.y.offsetY !== undefined ? axisComponents.y.offsetY : calculatedOffset.y\n  };\n};\n\nvar createStringMap = function createStringMap(props, axis, childComponents) {\n  var allStrings = Wrapper.getStringsFromChildren(props, axis, childComponents);\n  return allStrings.length === 0 ? null : allStrings.reduce(function (memo, string, index) {\n    memo[string] = index + 1;\n    return memo;\n  }, {});\n};\n\nexport { getChildren, getCalculatedProps, getChildComponents };","map":null,"metadata":{},"sourceType":"module"}