{"ast":null,"code":"import _without from \"lodash/without\";\nimport _assign from \"lodash/assign\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport { voronoi as d3Voronoi } from \"d3-voronoi\";\nimport { Helpers, LabelHelpers, Scale, Domain, Data } from \"victory-core\";\n\nvar getVoronoi = function getVoronoi(props, range, scale) {\n  var minRange = [Math.min.apply(Math, _toConsumableArray(range.x)), Math.min.apply(Math, _toConsumableArray(range.y))];\n  var maxRange = [Math.max.apply(Math, _toConsumableArray(range.x)), Math.max.apply(Math, _toConsumableArray(range.y))];\n\n  var angleAccessor = function angleAccessor(d) {\n    var x = scale.x(d._x1 !== undefined ? d._x1 : d._x);\n    return -1 * x + Math.PI / 2;\n  };\n\n  var xAccessor = function xAccessor(d) {\n    return scale.x(d._x1 !== undefined ? d._x1 : d._x);\n  };\n\n  return d3Voronoi().x(function (d) {\n    return props.polar ? angleAccessor(d) : xAccessor(d);\n  }).y(function (d) {\n    return scale.y(d._y1 !== undefined ? d._y1 : d._y);\n  }).extent([minRange, maxRange]);\n};\n\nvar getCalculatedValues = function getCalculatedValues(props) {\n  var defaultStyles = props.theme && props.theme.voronoi && props.theme.voronoi.style ? props.theme.voronoi.style : {};\n  var style = Helpers.getStyles(props.style, defaultStyles);\n  var data = Data.getData(props);\n  var range = {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var domain = {\n    x: Domain.getDomain(props, \"x\"),\n    y: Domain.getDomain(props, \"y\")\n  };\n  var scale = {\n    x: Scale.getBaseScale(props, \"x\").domain(domain.x).range(range.x),\n    y: Scale.getBaseScale(props, \"y\").domain(domain.y).range(range.y)\n  };\n  var voronoi = getVoronoi(props, range, scale);\n  var polygons = voronoi.polygons(data);\n  var origin = props.polar ? props.origin || Helpers.getPolarOrigin(props) : undefined;\n  return {\n    domain: domain,\n    data: data,\n    scale: scale,\n    style: style,\n    polygons: polygons,\n    origin: origin\n  };\n};\n\nvar getBaseProps = function getBaseProps(props, fallbackProps) {\n  var modifiedProps = Helpers.modifyProps(props, fallbackProps, \"scatter\");\n  props = _assign({}, modifiedProps, getCalculatedValues(modifiedProps));\n  var _props = props,\n      data = _props.data,\n      domain = _props.domain,\n      events = _props.events,\n      height = _props.height,\n      origin = _props.origin,\n      padding = _props.padding,\n      polar = _props.polar,\n      polygons = _props.polygons,\n      scale = _props.scale,\n      sharedEvents = _props.sharedEvents,\n      standalone = _props.standalone,\n      style = _props.style,\n      theme = _props.theme,\n      width = _props.width,\n      labels = _props.labels,\n      name = _props.name;\n  var initialChildProps = {\n    parent: {\n      style: style.parent,\n      scale: scale,\n      domain: domain,\n      data: data,\n      standalone: standalone,\n      height: height,\n      width: width,\n      theme: theme,\n      origin: origin,\n      polar: polar,\n      padding: padding,\n      name: name\n    }\n  };\n  return data.reduce(function (childProps, datum, index) {\n    var polygon = _without(polygons[index], \"data\");\n\n    var eventKey = datum.eventKey;\n\n    var _Helpers$scalePoint = Helpers.scalePoint(props, datum),\n        x = _Helpers$scalePoint.x,\n        y = _Helpers$scalePoint.y;\n\n    var dataProps = {\n      x: x,\n      y: y,\n      datum: datum,\n      data: data,\n      index: index,\n      scale: scale,\n      polygon: polygon,\n      origin: origin,\n      size: props.size,\n      style: style.data\n    };\n    childProps[eventKey] = {\n      data: dataProps\n    };\n    var text = LabelHelpers.getText(props, datum, index);\n\n    if (text !== undefined && text !== null || labels && (events || sharedEvents)) {\n      childProps[eventKey].labels = LabelHelpers.getProps(props, index);\n    }\n\n    return childProps;\n  }, initialChildProps);\n};\n\nexport { getBaseProps };","map":null,"metadata":{},"sourceType":"module"}