{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _without from \"lodash/without\";\nimport _pick from \"lodash/pick\";\nimport _isFunction from \"lodash/isFunction\";\nimport _keys from \"lodash/keys\";\nimport _assign from \"lodash/assign\";\nimport _defaults from \"lodash/defaults\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nimport React from \"react\";\nimport Events from \"./events\";\nimport isEqual from \"react-fast-compare\";\nimport VictoryTransition from \"../victory-transition/victory-transition\"; //  used for checking state changes. Expected components can be passed in via options\n\nvar defaultComponents = [{\n  name: \"parent\",\n  index: \"parent\"\n}, {\n  name: \"data\"\n}, {\n  name: \"labels\"\n}];\nexport default (function (WrappedComponent, options) {\n  return (\n    /*#__PURE__*/\n    function (_WrappedComponent) {\n      _inherits(addEvents, _WrappedComponent);\n\n      function addEvents(props) {\n        var _this;\n\n        _classCallCheck(this, addEvents);\n\n        _this = _possibleConstructorReturn(this, (addEvents.__proto__ || Object.getPrototypeOf(addEvents)).call(this, props));\n        var getScopedEvents = Events.getScopedEvents.bind(_assertThisInitialized(_this));\n        var boundGetEvents = Events.getEvents.bind(_assertThisInitialized(_this));\n        _this.state = {};\n\n        _this.getEvents = function (p, target, eventKey) {\n          return boundGetEvents(p, target, eventKey, getScopedEvents);\n        };\n\n        _this.getEventState = Events.getEventState.bind(_assertThisInitialized(_this));\n\n        var calculatedValues = _this.getCalculatedValues(props);\n\n        _this.cacheValues(calculatedValues);\n\n        _this.externalMutations = _this.getExternalMutations(props);\n        return _this;\n      }\n\n      _createClass(addEvents, [{\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n          var externalMutations = this.getExternalMutations(this.props);\n\n          if (!isEqual(this.externalMutations, externalMutations)) {\n            this.externalMutations = externalMutations;\n            this.applyExternalMutations(this.props, externalMutations);\n          }\n        }\n      }, {\n        key: \"componentWillReceiveProps\",\n        value: function componentWillReceiveProps(nextProps) {\n          this.cacheValues(this.getCalculatedValues(nextProps));\n        }\n      }, {\n        key: \"applyExternalMutations\",\n        value: function applyExternalMutations(props, externalMutations) {\n          if (!_isEmpty(externalMutations)) {\n            var callbacks = props.externalEventMutations.reduce(function (memo, mutation) {\n              memo = _isFunction(mutation.callback) ? memo.concat(mutation.callback) : memo;\n              return memo;\n            }, []);\n            var compiledCallbacks = callbacks.length ? function () {\n              callbacks.forEach(function (c) {\n                return c();\n              });\n            } : undefined;\n            this.setState(externalMutations, compiledCallbacks);\n          }\n        } // compile all state changes from own and parent state. Order doesn't matter, as any state\n        // state change should trigger a re-render\n\n      }, {\n        key: \"getStateChanges\",\n        value: function getStateChanges(props, calculatedValues) {\n          var _this2 = this;\n\n          var hasEvents = calculatedValues.hasEvents,\n              getSharedEventState = calculatedValues.getSharedEventState;\n\n          if (!hasEvents) {\n            return {};\n          }\n\n          options = options || {};\n          var components = options.components || defaultComponents;\n\n          var getState = function getState(key, type) {\n            var baseState = _defaults({}, _this2.getEventState(key, type), getSharedEventState(key, type));\n\n            return _isEmpty(baseState) ? undefined : baseState;\n          };\n\n          return components.map(function (component) {\n            if (!props.standalone && component.name === \"parent\") {\n              // don't check for changes on parent props for non-standalone components\n              return undefined;\n            } else {\n              return component.index !== undefined ? getState(component.index, component.name) : calculatedValues.dataKeys.map(function (key) {\n                return getState(key, component.name);\n              });\n            }\n          }).filter(Boolean);\n        }\n      }, {\n        key: \"getCalculatedValues\",\n        value: function getCalculatedValues(props) {\n          var sharedEvents = props.sharedEvents;\n          var components = WrappedComponent.expectedComponents;\n          var componentEvents = Events.getComponentEvents(props, components);\n          var getSharedEventState = sharedEvents && _isFunction(sharedEvents.getEventState) ? sharedEvents.getEventState : function () {\n            return undefined;\n          };\n          var baseProps = this.getBaseProps(props, getSharedEventState);\n\n          var dataKeys = _keys(baseProps).filter(function (key) {\n            return key !== \"parent\";\n          });\n\n          var hasEvents = props.events || props.sharedEvents || componentEvents;\n          var events = this.getAllEvents(props);\n          return {\n            componentEvents: componentEvents,\n            getSharedEventState: getSharedEventState,\n            baseProps: baseProps,\n            dataKeys: dataKeys,\n            hasEvents: hasEvents,\n            events: events\n          };\n        }\n      }, {\n        key: \"getExternalMutations\",\n        value: function getExternalMutations(props) {\n          var sharedEvents = props.sharedEvents,\n              externalEventMutations = props.externalEventMutations;\n          return _isEmpty(externalEventMutations) || sharedEvents ? undefined : Events.getExternalMutations(externalEventMutations, this.baseProps, this.state);\n        }\n      }, {\n        key: \"cacheValues\",\n        value: function cacheValues(obj) {\n          var _this3 = this;\n\n          _keys(obj).forEach(function (key) {\n            _this3[key] = obj[key];\n          });\n        }\n      }, {\n        key: \"getBaseProps\",\n        value: function getBaseProps(props, getSharedEventState) {\n          getSharedEventState = getSharedEventState || this.getSharedEventState;\n          var sharedParentState = getSharedEventState(\"parent\", \"parent\");\n          var parentState = this.getEventState(\"parent\", \"parent\");\n\n          var baseParentProps = _defaults({}, parentState, sharedParentState);\n\n          var parentPropsList = baseParentProps.parentControlledProps;\n          var parentProps = parentPropsList ? _pick(baseParentProps, parentPropsList) : {};\n\n          var modifiedProps = _defaults({}, parentProps, props);\n\n          return _isFunction(WrappedComponent.getBaseProps) ? WrappedComponent.getBaseProps(modifiedProps) : {};\n        }\n      }, {\n        key: \"getAllEvents\",\n        value: function getAllEvents(props) {\n          if (Array.isArray(this.componentEvents)) {\n            var _componentEvents;\n\n            return Array.isArray(props.events) ? (_componentEvents = this.componentEvents).concat.apply(_componentEvents, _toConsumableArray(props.events)) : this.componentEvents;\n          }\n\n          return props.events;\n        }\n      }, {\n        key: \"getComponentProps\",\n        value: function getComponentProps(component, type, index) {\n          var name = this.props.name || WrappedComponent.role;\n          var key = this.dataKeys && this.dataKeys[index] || index;\n          var id = \"\".concat(name, \"-\").concat(type, \"-\").concat(key);\n          var baseProps = this.baseProps[key] && this.baseProps[key][type] || this.baseProps[key];\n\n          if (!baseProps && !this.hasEvents) {\n            return undefined;\n          }\n\n          if (this.hasEvents) {\n            var baseEvents = this.getEvents(this.props, type, key);\n\n            var componentProps = _defaults({\n              index: index,\n              key: id\n            }, this.getEventState(key, type), this.getSharedEventState(key, type), component.props, baseProps, {\n              id: id\n            });\n\n            var events = _defaults({}, Events.getPartialEvents(baseEvents, key, componentProps), componentProps.events);\n\n            return _assign({}, componentProps, {\n              events: events\n            });\n          }\n\n          return _defaults({\n            index: index,\n            key: id\n          }, component.props, baseProps, {\n            id: id\n          });\n        }\n      }, {\n        key: \"renderContainer\",\n        value: function renderContainer(component, children) {\n          var isContainer = component.type && component.type.role === \"container\";\n          var parentProps = isContainer ? this.getComponentProps(component, \"parent\", \"parent\") : {};\n          return React.cloneElement(component, parentProps, children);\n        }\n      }, {\n        key: \"animateComponent\",\n        value: function animateComponent(props, animationWhitelist) {\n          return React.createElement(VictoryTransition, {\n            animate: props.animate,\n            animationWhitelist: animationWhitelist\n          }, React.createElement(this.constructor, props));\n        } // Used by `VictoryLine` and `VictoryArea`\n\n      }, {\n        key: \"renderContinuousData\",\n        value: function renderContinuousData(props) {\n          var _this4 = this;\n\n          var dataComponent = props.dataComponent,\n              labelComponent = props.labelComponent,\n              groupComponent = props.groupComponent;\n\n          var dataKeys = _without(this.dataKeys, \"all\");\n\n          var labelComponents = dataKeys.reduce(function (memo, key) {\n            var labelProps = _this4.getComponentProps(labelComponent, \"labels\", key);\n\n            if (labelProps && labelProps.text !== undefined && labelProps.text !== null) {\n              memo = memo.concat(React.cloneElement(labelComponent, labelProps));\n            }\n\n            return memo;\n          }, []);\n          var dataProps = this.getComponentProps(dataComponent, \"data\", \"all\");\n          var children = [React.cloneElement(dataComponent, dataProps)].concat(_toConsumableArray(labelComponents));\n          return this.renderContainer(groupComponent, children);\n        }\n      }, {\n        key: \"renderData\",\n        value: function renderData(props) {\n          var _this5 = this;\n\n          var dataComponent = props.dataComponent,\n              labelComponent = props.labelComponent,\n              groupComponent = props.groupComponent;\n          var dataComponents = this.dataKeys.map(function (_dataKey, index) {\n            var dataProps = _this5.getComponentProps(dataComponent, \"data\", index);\n\n            return React.cloneElement(dataComponent, dataProps);\n          });\n          var labelComponents = this.dataKeys.map(function (_dataKey, index) {\n            var labelProps = _this5.getComponentProps(labelComponent, \"labels\", index);\n\n            if (labelProps.text !== undefined && labelProps.text !== null) {\n              return React.cloneElement(labelComponent, labelProps);\n            }\n\n            return undefined;\n          }).filter(Boolean);\n\n          var children = _toConsumableArray(dataComponents).concat(_toConsumableArray(labelComponents));\n\n          return this.renderContainer(groupComponent, children);\n        }\n      }]);\n\n      return addEvents;\n    }(WrappedComponent)\n  );\n});","map":null,"metadata":{},"sourceType":"module"}